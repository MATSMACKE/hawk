use hawk_common::token::TokenType;

pub trait UserPrint {
    fn user_print(&self) -> String;
}

impl UserPrint for TokenType {
    fn user_print(&self) -> String {
        match self {
            TokenType::Abs => format!("|"),
            TokenType::And => format!("and"),
            TokenType::Assign => format!("="),
            TokenType::Asterisk => format!("*"),
            TokenType::BraceLeft => format!("{{"),
            TokenType::BraceRight => format!("}}"),
            TokenType::BracketLeft => format!("["),
            TokenType::BracketRight => format!("]"),
            TokenType::Break => format!("break"),
            TokenType::Caret => format!("^"),
            TokenType::Class => format!("class"),
            TokenType::Colon => format!(":"),
            TokenType::Comma => format!(","),
            TokenType::Dot => format!("."),
            TokenType::E => format!("E"),
            TokenType::EOF => format!("end of file"),
            TokenType::Else => format!("else"),
            TokenType::EqualEqual => format!("=="),
            TokenType::Equation => format!("equation"),
            TokenType::False => format!("false"),
            TokenType::FatArrow => format!("=>"),
            TokenType::Find => format!("find"),
            TokenType::Finder => format!("finder"),
            TokenType::Float => format!("Float"),
            TokenType::For => format!("for"),
            TokenType::Function => format!("function"),
            TokenType::GreaterThan => format!(">"),
            TokenType::GreaterThanEqual => format!(">="),
            TokenType::Identifier => format!("identifier"),
            TokenType::If => format!("if"),
            TokenType::Import => format!("import"),
            TokenType::Int => format!("Integer"),
            TokenType::LessThan => format!("<"),
            TokenType::LessThanEqual => format!("<="),
            TokenType::Let => format!("let"),
            TokenType::Loop => format!("loop"),
            TokenType::Minus => format!("-"),
            TokenType::NewLine => format!("newline"),
            TokenType::Not => format!("not"),
            TokenType::NotEqual => format!("!="),
            TokenType::Null => format!("null"),
            TokenType::Or => format!("or"),
            TokenType::ParenthesisLeft => format!("("),
            TokenType::ParenthesisRight => format!(")"),
            TokenType::Plus => format!("+"),
            TokenType::PlusMinus => format!("Â±"),
            TokenType::Print => format!("print"),
            TokenType::Process => format!("process"),
            TokenType::QuestionMark => format!("?"),
            TokenType::Return => format!("return"),
            TokenType::Semicolon => format!(";"),
            TokenType::Slash => format!("/"),
            TokenType::String => format!("String"),
            TokenType::Super => format!("super"),
            TokenType::This => format!("this"),
            TokenType::True => format!("true"),
            TokenType::While => format!("while"),
        }
    }
}